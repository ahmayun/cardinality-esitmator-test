
============================STATS========================================
Actual Count: 52
Estimated Count: 52
Abs diff: 0
============================QUERY========================================
select  
  subq_0.c1 as c0, 
  subq_0.c0 as c1, 
  subq_0.c1 as c2
from 
  (select distinct 
        ref_0.ws_ship_date_sk as c0, 
        ref_0.ws_ext_wholesale_cost as c1, 
        ref_0.ws_wholesale_cost as c2
      from 
        main.web_sales as ref_0
      where ref_0.ws_bill_addr_sk is not NULL
      limit 79) as subq_0
where subq_0.c2 is not NULL
limit 52
============================OUTPUT========================================
[c0: decimal(7,2), c1: int ... 1 more field]
============================PLAN========================================
== Parsed Logical Plan ==
'GlobalLimit 52
+- 'LocalLimit 52
   +- 'Project ['subq_0.c1 AS c0#5715, 'subq_0.c0 AS c1#5716, 'subq_0.c1 AS c2#5717]
      +- 'Filter isnotnull('subq_0.c2)
         +- 'SubqueryAlias subq_0
            +- 'GlobalLimit 79
               +- 'LocalLimit 79
                  +- 'Distinct
                     +- 'Project ['ref_0.ws_ship_date_sk AS c0#5712, 'ref_0.ws_ext_wholesale_cost AS c1#5713, 'ref_0.ws_wholesale_cost AS c2#5714]
                        +- 'Filter isnotnull('ref_0.ws_bill_addr_sk)
                           +- 'SubqueryAlias ref_0
                              +- 'UnresolvedRelation [main, web_sales]

== Analyzed Logical Plan ==
c0: decimal(7,2), c1: int, c2: decimal(7,2)
GlobalLimit 52
+- LocalLimit 52
   +- Project [c1#5713 AS c0#5715, c0#5712 AS c1#5716, c1#5713 AS c2#5717]
      +- Filter isnotnull(c2#5714)
         +- SubqueryAlias subq_0
            +- GlobalLimit 79
               +- LocalLimit 79
                  +- Distinct
                     +- Project [ws_ship_date_sk#3075 AS c0#5712, ws_ext_wholesale_cost#3097 AS c1#5713, ws_wholesale_cost#3092 AS c2#5714]
                        +- Filter isnotnull(ws_bill_addr_sk#3080)
                           +- SubqueryAlias ref_0
                              +- SubqueryAlias spark_catalog.main.web_sales
                                 +- Relation[ws_sold_time_sk#3074,ws_ship_date_sk#3075,ws_item_sk#3076,ws_bill_customer_sk#3077,ws_bill_cdemo_sk#3078,ws_bill_hdemo_sk#3079,ws_bill_addr_sk#3080,ws_ship_customer_sk#3081,ws_ship_cdemo_sk#3082,ws_ship_hdemo_sk#3083,ws_ship_addr_sk#3084,ws_web_page_sk#3085,ws_web_site_sk#3086,ws_ship_mode_sk#3087,ws_warehouse_sk#3088,ws_promo_sk#3089,ws_order_number#3090L,ws_quantity#3091,ws_wholesale_cost#3092,ws_list_price#3093,ws_sales_price#3094,ws_ext_discount_amt#3095,ws_ext_sales_price#3096,ws_ext_wholesale_cost#3097,... 10 more fields] parquet

== Optimized Logical Plan ==
GlobalLimit 52
+- LocalLimit 52
   +- Project [c1#5713 AS c0#5715, c0#5712 AS c1#5716, c1#5713 AS c2#5717]
      +- Filter isnotnull(c2#5714)
         +- GlobalLimit 79
            +- LocalLimit 79
               +- Aggregate [c0#5712, c1#5713, c2#5714], [c0#5712, c1#5713, c2#5714]
                  +- Project [ws_ship_date_sk#3075 AS c0#5712, ws_ext_wholesale_cost#3097 AS c1#5713, ws_wholesale_cost#3092 AS c2#5714]
                     +- Filter isnotnull(ws_bill_addr_sk#3080)
                        +- Relation[ws_sold_time_sk#3074,ws_ship_date_sk#3075,ws_item_sk#3076,ws_bill_customer_sk#3077,ws_bill_cdemo_sk#3078,ws_bill_hdemo_sk#3079,ws_bill_addr_sk#3080,ws_ship_customer_sk#3081,ws_ship_cdemo_sk#3082,ws_ship_hdemo_sk#3083,ws_ship_addr_sk#3084,ws_web_page_sk#3085,ws_web_site_sk#3086,ws_ship_mode_sk#3087,ws_warehouse_sk#3088,ws_promo_sk#3089,ws_order_number#3090L,ws_quantity#3091,ws_wholesale_cost#3092,ws_list_price#3093,ws_sales_price#3094,ws_ext_discount_amt#3095,ws_ext_sales_price#3096,ws_ext_wholesale_cost#3097,... 10 more fields] parquet

== Physical Plan ==
CollectLimit 52
+- *(3) Project [c1#5713 AS c0#5715, c0#5712 AS c1#5716, c1#5713 AS c2#5717]
   +- *(3) Filter isnotnull(c2#5714)
      +- *(3) GlobalLimit 79
         +- Exchange SinglePartition, true, [id=#6626]
            +- *(2) LocalLimit 79
               +- *(2) HashAggregate(keys=[c0#5712, c1#5713, c2#5714], functions=[], output=[c0#5712, c1#5713, c2#5714])
                  +- Exchange hashpartitioning(c0#5712, c1#5713, c2#5714, 200), true, [id=#6621]
                     +- *(1) HashAggregate(keys=[c0#5712, c1#5713, c2#5714], functions=[], output=[c0#5712, c1#5713, c2#5714])
                        +- *(1) Project [ws_ship_date_sk#3075 AS c0#5712, ws_ext_wholesale_cost#3097 AS c1#5713, ws_wholesale_cost#3092 AS c2#5714]
                           +- *(1) Filter isnotnull(ws_bill_addr_sk#3080)
                              +- *(1) ColumnarToRow
                                 +- FileScan parquet main.web_sales[ws_ship_date_sk#3075,ws_bill_addr_sk#3080,ws_wholesale_cost#3092,ws_ext_wholesale_cost#3097,ws_sold_date_sk#3107] Batched: true, DataFilters: [isnotnull(ws_bill_addr_sk#3080)], Format: Parquet, Location: CatalogFileIndex[file:/home/ahmad/Documents/project/cardinality-estimator-test/tpcds-data-for-mai..., PartitionFilters: [], PushedFilters: [IsNotNull(ws_bill_addr_sk)], ReadSchema: struct<ws_ship_date_sk:int,ws_bill_addr_sk:int,ws_wholesale_cost:decimal(7,2),ws_ext_wholesale_co...

